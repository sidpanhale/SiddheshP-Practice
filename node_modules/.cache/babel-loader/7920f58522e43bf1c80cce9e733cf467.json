{"ast":null,"code":"var _jsxFileName = \"/home/iprogrammer/Desktop/section20/src/Pages/AllQuotes.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_DATA = [{\n  id: \"q1\",\n  author: \"abc\",\n  text: \"abc\"\n}, {\n  id: \"q2\",\n  author: \"def\",\n  text: \"def\"\n}];\nexport default function AllQuotes() {\n  _s();\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === \"pending\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered focus\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return /*#__PURE__*/_jsxDEV(NoQuotesFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(QuoteList, {\n    quotes: DUMMY_DATA\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n}\n\n_s(AllQuotes, \"SfSVcpc0ZadyNGuM4WkoEDcFW3Q=\", false, function () {\n  return [useHttp];\n});\n\n_c = AllQuotes;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllQuotes\");","map":{"version":3,"sources":["/home/iprogrammer/Desktop/section20/src/Pages/AllQuotes.js"],"names":["React","useEffect","QuoteList","LoadingSpinner","useHttp","getAllQuotes","NoQuotesFound","DUMMY_DATA","id","author","text","AllQuotes","sendRequest","status","data","loadedQuotes","error","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,aAAP,MAA0B,oCAA1B;;AAEA,MAAMC,UAAU,GAAG,CACjB;AAAEC,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,MAAM,EAAE,KAApB;AAA2BC,EAAAA,IAAI,EAAE;AAAjC,CADiB,EAEjB;AAAEF,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,MAAM,EAAE,KAApB;AAA2BC,EAAAA,IAAI,EAAE;AAAjC,CAFiB,CAAnB;AAKA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAClC,QAAM;AACJC,IAAAA,WADI;AAEJC,IAAAA,MAFI;AAGJC,IAAAA,IAAI,EAAEC,YAHF;AAIJC,IAAAA;AAJI,MAKFZ,OAAO,CAACC,YAAD,EAAe,IAAf,CALX;AAOAJ,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;;AAIA,MAAIC,MAAM,KAAK,SAAf,EAA0B;AACxB,wBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAED,MAAIG,KAAJ,EAAW;AACT,wBAAO;AAAG,MAAA,SAAS,EAAC,gBAAb;AAAA,gBAA+BA;AAA/B;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAGH,MAAM,KAAK,WAAX,KAA2B,CAACE,YAAD,IAAiBA,YAAY,CAACE,MAAb,KAAwB,CAApE,CAAH,EAA0E;AACxE,wBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBAAO,QAAC,SAAD;AAAW,IAAA,MAAM,EAAEV;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA7BuBI,S;UAMlBP,O;;;KANkBO,S","sourcesContent":["import React, { useEffect } from \"react\";\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\nimport NoQuotesFound from '../components/quotes/NoQuotesFound'\n\nconst DUMMY_DATA = [\n  { id: \"q1\", author: \"abc\", text: \"abc\" },\n  { id: \"q2\", author: \"def\", text: \"def\" },\n];\n\nexport default function AllQuotes() {\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error,\n  } = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered focus\">{error}</p>;\n  }\n\n  if(status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)){\n    return <NoQuotesFound />\n  }\n\n  return <QuoteList quotes={DUMMY_DATA} />;\n}\n"]},"metadata":{},"sourceType":"module"}